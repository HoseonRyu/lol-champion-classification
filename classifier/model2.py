# -*- coding: utf-8 -*-
"""GMProj-model1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JE2jDb1iZY0vZy3GaEqvJ3vKSirjxrfP
"""

pip install scikit-network

import numpy as np
from sknetwork.clustering import Louvain

from google.colab import files
uploaded = files.upload()

list_node = ['236', '412', '4', '51', '143', '245', '84', '61', '101', '112', '15', '202', '104', '64', '136', '41', '121', '28', '111', '56', '517', '50', '31', '12', '350', '122', '131', '222', '78', '17', '24', '238', '99', '432', '498', '115', '60', '86', '154', '157', '110', '79', '26', '32', '25', '523', '16', '59', '18', '74', '161', '92', '22', '76', '105', '43', '82', '127', '875', '120', '63', '266', '68', '54', '23', '516', '203', '81', '57', '96', '235', '7', '887', '48', '119', '30', '777', '37', '555', '145', '201', '55', '45', '14', '38', '102', '67', '40', '36', '77', '518', '53', '80', '147', '427', '39', '163', '13', '126', '85', '21', '117', '360', '876', '11', '267', '75', '9', '20', '133', '89', '62', '254', '34', '6', '90', '234', '29', '103', '429', '1', '141', '223', '134', '10', '142', '35', '246', '113', '44', '164', '91', '69', '268', '42', '33', '150', '8', '114', '58', '497', '19', '98', '5', '106', '2', '107', '3', '526', '72', '27', '420', '83', '240', '421']
list_edge = []
n = len(list_node)

w = {}
l = {}
w_dep = {}
l_dep = {}
w_dom = {}

for i in range(n):
  i_ = list_node[i]
  w[i_]=0
  l[i_]=0
  w_dep[i_] = {}
  l_dep[i_] = {}
  w_dom[i_] = {}

for i in range(n):
  i_ = list_node[i]
  for j in range(n):
    j_ = list_node[j]
    w_dep[i_][j_] = 0
    l_dep[i_][j_] = 0
    w_dom[i_][j_] = 0

f = open('output_no_dup.txt', 'r')

for line in f.readlines():
  linedata = line.strip().split('/')
  v = linedata[0].split(',')
  d = linedata[1].split(',')

  for c1 in v:
    w[c1] = w[c1]+1
    for c2 in v:
      w_dep[c1][c2] = w_dep[c1][c2] +1
    for c2 in d:
      w_dom[c1][c2] = w_dom[c1][c2] +1
  for c1 in d:
    l[c1] = l[c1]+1
    for c2 in d:
      l_dep[c1][c2] = l_dep[c1][c2] +1

w_ = {}
w_dep_ = {}
w_dom_ = {}

for i in range(n):
  i_ = list_node[i]
  w_[i_]=w[i_]/(w[i_]+l[i_])
  w_dep_[i_] = {}
  w_dom_[i_] = {}

for i in range(n):
  i_ = list_node[i]
  for j in range(n):
    j_ = list_node[j]
    w_dep_[i_][j_] = w_dep[i_][j_] / (w_dep[i_][j_]+l_dep[i_][j_]+0.01)
    w_dom_[i_][j_] = w_dom[i_][j_] / (w_dom[i_][j_]+w_dom[j_][i_]+0.01)

def func(c1,c2):
  if c1 == c2:
    return 0
  ret = 0
  for c3 in list_node:
    if c3 == c1 or c3 == c2:
      continue
    dep1 = w_dep_[c1][c3]-w_[c1]
    dep2 = w_dep_[c2][c3]-w_[c2]
    dom1 = (w_dom_[c1][c3]-w_[c1]) - (w_dom_[c3][c1]-w_[c3])
    dom2 = (w_dom_[c1][c3]-w_[c1]) - (w_dom_[c3][c1]-w_[c3])
    ret = ret + 1/((dep1-dep2)**2 * 2 + (dom1-dom2)**2)
  return ret

A = np.zeros((n, n))
for i in range(n):
  for j in range(n):
    A[i,j] = func(list_node[i],list_node[j])

louvain = Louvain()
labels = louvain.fit_transform(A)

labels_unique, counts = np.unique(labels, return_counts = True)
print("Unique labels: %s" % labels_unique)
print("Number of nodes with each label: %s" % counts)
print(labels)

champ_list = ['Lucian','Thresh','Twisted Fate','Caitlyn','Zyra','Ekko','Akali','Orianna','Xerath','Viktor','Sivir','Jhin','Graves','Lee Sin','Aurelion Sol','Gangplank','KhaZix','Evelynn','Nautilus','Nocturne','Sylas','Swain','ChoGath','Alistar','Yuumi','Darius','Diana','Jinx','Poppy','Teemo','Jax','Zed','Lux','Bard','Xayah','Ziggs','Elise','Garen','Zac','Yasuo','Varus','Gragas','Zilean','Amumu','Morgana','Aphelios','Soraka','Jarvan IV','Tristana','Heimerdinger','VelKoz','Riven','Ashe','Nidalee','Fizz','Karma','Mordekaiser','Lissandra','Sett','Hecarim','Brand','Aatrox','Rumble','Malphite','Tryndamere','Ornn','Kindred','Ezreal','Maokai','KogMaw','Senna','LeBlanc','Gwen','Trundle','Draven','Karthus','Yone','Sona','Pyke','Kaisa','Braum','Katarina','Veigar','Sion','Kassadin','Shyvana','Vayne','Janna','Dr. Mundo','Udyr','Neeko','Blitzcrank','Pantheon','Seraphine','Ivern','Irelia','Taliyah','Ryze','Jayce','Kennen','Miss Fortune','Lulu','Samira','Lillia','Master Yi','Nami','Nasus','Fiddlesticks','Nunu','Quinn','Leona','Wukong','Vi','Anivia','Urgot','Malzahar','Viego','Twitch','Ahri','Kalista','Annie','Kayn','Tahm Kench','Syndra','Kayle','Zoe','Shaco','Qiyana','Sejuani','Taric','Camille','Talon','Cassiopeia','Azir','Corki','Rammus','Gnar','Vladimir','Fiora','Renekton','Rakan','Warwick','Shen','Xin Zhao','Volibear','Olaf','Rengar','Galio','Rell','Skarner','Singed','Illaoi','Yorick','Kled','RekSai',]
result = dict()
for i in range(len(labels_unique)):
  result[i] = []
for i in range(n):
  result[labels[i]].append(champ_list[i])
for i in range(len(labels_unique)):
  print("cluster",i,":",result[i])